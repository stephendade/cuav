image:
- Visual Studio 2015
environment:
  global:
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script intepreter
    # See: http://stackoverflow.com/a/13751649/163740
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\appveyor\\run_with_env.cmd"

  matrix:
    # Pre-installed Python versions, which Appveyor may upgrade to
    # a later point release.
    # See: https://www.appveyor.com/docs/installed-software#python
    - PYTHON_INSTALL: "C:\\Python35"
      PYTHON_ARCH: 32
      PYTHON_VERSION: "3.5.x"
      MSVC_VERSION: "Visual Studio 14"

install:
  # If there is a newer build queued for the same PR, cancel this one.
  # The AppVeyor 'rollout builds' option is supposed to serve the same
  # purpose but it is problematic because it tends to cancel builds pushed
  # directly to master instead of just PR builds (or the converse).
  # credits: JuliaLang developers.
  - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
        https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
        Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
          throw "There are newer queued builds for this pull request, failing early." }

  # Prepend Python installation to PATH
  - set PATH=%PYTHON_INSTALL%;%PATH%

  # Prepend Python scripts to PATH (e.g. pip, py.test, pylint)
  - set PATH=%PYTHON_INSTALL%\Scripts;%PATH%
          
  # Check that we have the expected version and architecture for Python
  - "python.exe --version"
  - "python.exe -c \"import struct; print(struct.calcsize('P') * 8)\""
  
  # Install the build dependencies of the project. If some dependencies contain
  # compiled extensions and are not provided as pre-built wheel packages,
  # pip will build them from source using the MSVC compiler matching the
  # target Python version and architecture
  - "pip install -U pywin32"
  - "pip install -U -r requirements.txt"
  - "pip install -U -r ./tests/requirements-test.txt"
  
  #We're using Inno Setup to build an installer
  - cinst -y InnoSetup
  
  #Debug for getting a list of what packages/version were used for this build
  - "pip list"

  #Download SRTM data, because MAVProxy fails without it cached
  #It returns a None if needs to download in the background (need to fix this)
  #- "mkdir %APPDATA%\\MAVProxy\\SRTM"
  #- "copy .\\tests\\testdata\\filelist_python %APPDATA%\\MAVProxy\\SRTM\\filelist_python"
  #- "cd %APPDATA%\\MAVProxy\\SRTM"
  #- ps: Start-FileDownload 'http://firmware.ardupilot.org/SRTM/Africa/S16E011.hgt.zip'
  #- ps: Start-FileDownload 'http://firmware.ardupilot.org/SRTM/Australia/S21E145.hgt.zip'
  #- ps: Start-FileDownload 'http://firmware.ardupilot.org/SRTM/Africa/S28E020.hgt.zip'
  #- ps: Start-FileDownload 'http://firmware.ardupilot.org/SRTM/Australia/S35E148.hgt.zip'
  #- ps: Start-FileDownload 'http://firmware.ardupilot.org/SRTM/Australia/S35E149.hgt.zip'
  #- ps: Start-FileDownload 'http://firmware.ardupilot.org/SRTM/Australia/S36E148.hgt.zip'
  #- ps: Start-FileDownload 'http://firmware.ardupilot.org/SRTM/Australia/S36E149.hgt.zip'
  #- ps: Start-FileDownload 'http://firmware.ardupilot.org/SRTM/Australia/S37E148.hgt.zip'
  #- ps: Start-FileDownload 'http://firmware.ardupilot.org/SRTM/Islands/S47E037.hgt.zip'
  #- "cd %APPVEYOR_BUILD_FOLDER%"
  
build_script:
  # Build and install the package
  - "python.exe setup.py build install"

test_script:
  # Run the project tests and store results in .xml log
  - "py.test --junitxml=.\\unittests.xml .\\tests\\" 
  - ps: | 
      $wc = New-Object 'System.Net.WebClient'
      $wc.UploadFile("https://ci.appveyor.com/api/testresults/junit/$($env:APPVEYOR_JOB_ID)", (Resolve-Path .\unittests.xml))
  - "del /Q coverage.xml"
      
after_test:
  # If tests are successful, create binary packages for the project.
  #run pyinstaller
  - "%PYTHON_INSTALL%\\Scripts\\pyinstaller -y --clean .\\windows\\cuav.spec"
  
  #create version txt file
  - "cd  .\\windows\\"
  - "for /f \"tokens=*\" %%a in ( \'python returnVersion.py\' ) do ( set VERSION=%%a )"
  - "@echo off"
  - "@echo %VERSION%> version.txt"
  - "@echo on"
  - "cd ..\\"
  
  #copy files
  - "mkdir .\\dist\\cuav"
  - "xcopy .\\dist\\geotag\\* .\\dist\\cuav /Y /E"
  - "xcopy .\\dist\\geosearch\\* .\\dist\\cuav /Y /E"

  #run setup
  - "cd  .\\windows\\"
  - "ISCC.exe /dMyAppVersion=%VERSION% cuav.iss"
  - "cd ..\\"

artifacts:
  # Archive the generated packages in the ci.appveyor.com build report.
  - path: dist\cuav
    name: WindowsCompiledFiles
  - path: windows\Output\
    name: WindowsInstaller
    
#on_success:
#  - TODO: upload the content of dist/*.whl to a public wheelhouse
#

on_finish:
  # Upload test results to AppVeyor
